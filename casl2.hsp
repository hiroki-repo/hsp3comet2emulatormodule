#include "hsp3cl.as"
#packopt name "casl2asm"
#packopt orgpath 1
#module
#defcfunc getregidfromname str prm_0
prm_0x=prm_0
if strmid(prm_0x,0,2)="GR" and int(strmid(prm_0x,2,1))<=7{return int(strmid(prm_0x,2,1))}
switch prm_0
case "SP"
return 8
swbreak
case "PR"
return 9
swbreak
case "FR"
return 10
swbreak
case "SVR"
return 11
swbreak
case "SVIR"
return 12
swbreak
case "SVTR"
return 13
swbreak
default
return -1
swbreak
swend
return -1
#defcfunc getpointerfromlb str prm_0
repeat 4096:if labelist@(cnt)=prm_0{cnt4lb=cnt:break}:loop
return labelistx@(cnt4lb)
#defcfunc getaddrfromtext str prm_0_
prm_0_x=prm_0_
if strmid(prm_0_x,0,1)="#"{return int("$"+strmid(prm_0_x,1,strlen(prm_0_x)))}else{if peek(prm_0_x,0)>=48 and peek(prm_0_x,0)<=57{return int(prm_0_x)}else{return getpointerfromlb(prm_0_x)}}
return -1
#deffunc errorhappened int prm_0
mes "Syntax error",1
mes "at line:"+str(lineid@)
end
return 0
#global
mes "Gocaine CASL II Asembler Ver 1.07"
sourceassembled=""
tab="	"
sdim definebuf,65536,256
sdim defname,256,256
sdim opcodebuf,65536*2
sdim sources,65536
sdim sourcesliced,4096
sdim sourcesliced2,256,32
sdim sourcesliced3,256,32
sdim sourcesliced4,256,32
sdim sourcesliced5,256,32
sdim sourcesliced33,256,32
sdim labelist,256,4096
dim labelistx,4096
sdim labelist2,256,16384
dim labelistx2,16384
dim pos4casl2,65536,2
repeat 65536:pos4casl2(cnt,1)=-1:loop
defineid=0:labelistpos=0:labelist2pos=0:opcodepos=0:startlet=0

/*source={"PROG0	START #0
A	LD GR0,C
\	SVC #1234
B	LD GR1,GR2
\	LAD SP,#FFF0
\	RET
C   LD GR2,GR3
\	DS 3
\	DC #F212
\	END
"}*/

fname4ass=dir_cmdline

repeat:if strmid(fname4ass,0,1)=" "{fname4ass=strmid(fname4ass,1,strlen(fname4ass))}else{break}:loop
if fname4ass=""{mes "Usage:casl2asm [File name of the source code file]":end}
exist fname4ass
if strsize=-1{mes "File not found...":end}

notesel sourcebase4macro
noteload fname4ass
noteunsel
notesel source
exist dir_exe+"\\casl2def.cas"
if strsize!-1{
noteload dir_exe+"\\casl2def.cas"
}
source+="\n"+sourcebase4macro
notemaxx=notemax
repeat// notemaxx
if cnt>=notemaxx{break}
src=0:dest=0:srcadd=0
lineid=cnt
noteget sourcesliced,cnt
if strmid(sourcesliced,0,1)=";"{continue cnt+1}
sdim sourcesliced2,256,32
repeat strlen(sourcesliced):if peek(sourcesliced,cnt)=0x09{poke sourcesliced,cnt,' '}else{poke sourcesliced,cnt,peek(sourcesliced,cnt)}:loop
split sourcesliced,tab,sourcesliced2
sourceslicedposxxx=0
if sourcesliced2(0)=sourcesliced and sourcesliced2(1)="" {sourcesliced2(0)="":repeat strlen(sourcesliced):if strmid(sourcesliced,cnt,1)=" "{cnt4chkpls=0:cnt4chk=cnt:repeat:if strmid(sourcesliced,cnt4chk+cnt,1)=" "{}else{cnt4chkpls=cnt:break}:loop:sourceslicedposxxx++:continue cnt+cnt4chkpls}else{sourcesliced2(sourceslicedposxxx)+=strmid(sourcesliced,cnt,1)}:loop:if (sourceslicedposxxx>=2){repeat sourceslicedposxxx-1:sourcesliced2(1)+=" "+sourcesliced2(2+cnt):loop}}
if sourcesliced2(0)!="" and (startlet!=0){labelist(labelistpos)=sourcesliced2(0):labelistx(labelistpos)=opcodepos:labelistpos++}
if sourcesliced2(1)==""{sourcesliced2(1)=sourcesliced2(0)}
if strmid(sourcesliced2(1),0,1)=";"{continue cnt+1}
sdim sourcesliced3,256,32
split sourcesliced2(1)," ",sourcesliced3
sourcesliced3optbased=""
repeat 31
sourcesliced3optbased+=" "+sourcesliced3(1+cnt)
loop
memexpand sourcesliced3optbased,varsize(sourcesliced3optbased)+1
repeat 30
sourcesliced3(1)+=sourcesliced3(2+cnt)
loop
sdim sourcesliced33,256,32
split sourcesliced3(1),";",sourcesliced33
sourcesliced3sk="":repeat strlen(sourcesliced3(0)):sourcesliced3sksliced=""+strmid(sourcesliced3(0),cnt,1):if peek(sourcesliced3sksliced,0)>='a' and peek(sourcesliced3sksliced,0)<='z'{poke sourcesliced3sksliced,0,peek(sourcesliced3sksliced)-32}:sourcesliced3sk+=sourcesliced3sksliced:loop
sourcesliced3sk2="":repeat strlen(sourcesliced33(0)):sourcesliced3sksliced=""+strmid(sourcesliced33(0),cnt,1):if peek(sourcesliced3sksliced,0)>='a' and peek(sourcesliced3sksliced,0)<='z'{poke sourcesliced3sksliced,0,peek(sourcesliced3sksliced)-32}:sourcesliced3sk2+=sourcesliced3sksliced:loop
sdim sourcesliced4,256,32
split sourcesliced3sk2,",",sourcesliced4
if sourcesliced3(0)!="RET"{
if sourcesliced3(0)="JMI" or sourcesliced3(0)="JNZ" or sourcesliced3(0)="JZE" or sourcesliced3(0)="JUMP" or sourcesliced3(0)="JPL" or sourcesliced3(0)="JOV" or sourcesliced3(0)="CALL" or sourcesliced3(0)="PUSH" or sourcesliced3(0)="SVC" {sourcesliced4(2)=sourcesliced4(1):sourcesliced4(1)=sourcesliced4(0):sourcesliced4(0)="":dest=0}else{dest=getregidfromname(sourcesliced4(0))}
if sourcesliced3(0)!="POP" {src=getregidfromname(sourcesliced4(1)):if src=-1 {labelist2(labelist2pos)=sourcesliced4(1):labelistx2(labelist2pos)=opcodepos+1:labelist2pos++}}//srcaddr=getaddrfromtext(sourcesliced4(1))}
}
if startlet{
opcodeposold=opcodepos
switch sourcesliced3(0)
case "NOP"
srcadd=0:src=0:dest=0:poke opcodebuf,((opcodepos*2)+0),0x00
swbreak

case "LD"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x10}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "LAD"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x12}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "ST"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x11}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak

case "ADDA"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x20}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x24}
swbreak
case "SUBA"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x21}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x25}
swbreak
case "ADDL"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x22}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x26}
swbreak
case "SUBL"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x23}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x27}
swbreak

case "AND"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x30}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x34}
swbreak
case "OR"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x31}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x35}
swbreak
case "XOR"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x32}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x36}
swbreak

case "CPA"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x40}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x44}
swbreak
case "CPL"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x41}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x45}
swbreak

case "SLA"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x50}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "SRA"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x51}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "SLL"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x52}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "SRL"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x53}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak

case "JMI"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x61}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "JNZ"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x62}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "JZE"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x63}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "JUMP"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x64}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "JPL"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x65}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "JOV"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x66}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak

case "PUSH"
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x70}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "POP"
srcadd=0:src=0:poke opcodebuf,((opcodepos*2)+0),0x71//if src=-1{errorhappened 0:break:srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x70}else{srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x71}
swbreak

case "CALL"
dest=0
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0x80}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak
case "RET"
srcadd=0:dest=0:src=0:poke opcodebuf,((opcodepos*2)+0),0x81
swbreak

case "SVC"
dest=0
if src=-1{srcadd=getregidfromname(sourcesliced4(2)):poke opcodebuf,((opcodepos*2)+0),0xF0}else{errorhappened 0:break:srcadd=src:poke opcodebuf,((opcodepos*2)+0),0x14}
swbreak

case "DS"
opcodepos+=int(sourcesliced4(0))
swbreak
case "DC"
/*srcaddr=getaddrfromtext(sourcesliced4(0))
poke opcodebuf,((opcodepos*2)+0),peek(srcaddr,1):poke opcodebuf,((opcodepos*2)+1),peek(srcaddr,0):*/
if strmid(sourcesliced3optbased,0,1)="\'"{repeat strlen(sourcesliced3optbased)-1:if wpeek(sourcesliced3optbased,cnt+1)=0x2727{srcaddr=peek(sourcesliced3optbased,cnt+1):poke opcodebuf,((opcodepos*2)+0),peek(srcaddr,1):poke opcodebuf,((opcodepos*2)+1),peek(srcaddr,0):opcodepos+=1:continue cnt+2}else{if peek(sourcesliced3optbased,cnt+1)=0x27{break}else{srcaddr=peek(sourcesliced3optbased,cnt+1):poke opcodebuf,((opcodepos*2)+0),peek(srcaddr,1):poke opcodebuf,((opcodepos*2)+1),peek(srcaddr,0):opcodepos+=1}}:loop}else{
labelist2(labelist2pos)=sourcesliced4(0):labelistx2(labelist2pos)=opcodepos:labelist2pos++
opcodepos+=1
}
swbreak

case "END"
codesize=(opcodepos-opcodestarts)*2
startlet=0
swbreak

case ""
continue cnt+1
swbreak

default
defineuseid=-1
repeat defineid:if sourcesliced3(0)=defname(cnt){defineuseid=cnt:break}:loop
//dialog defineuseid
if defineuseid!-1{
definebuf4edit=""+definebuf(defineuseid)
breaksign4mcr=0
repeat
macrochkxor=0
repeat 32
macroname="%"+str(cnt)+"%"
macrochk=instr(definebuf4edit,0,macroname)
if macrochk=-1{macrochkxor|=macrochk}else{macrochkxor&=macrochk
definebuf4edit=strmid(definebuf4edit,0,macrochk)+sourcesliced4(cnt)+strmid(definebuf4edit,macrochk+strlen(macroname),strlen(definebuf4edit))
}
loop
if macrochkxor=-1{break}
loop
//mes definebuf4edit
noteadd definebuf4edit,cnt,1:notemaxx=notemax:continue cnt}
swbreak

swend

if sourcesliced3(0)="DS" or sourcesliced3(0)="DC" or sourcesliced3(0)="END"{}else{
if srcadd=-1{
poke opcodebuf,((opcodepos*2)+1),((dest&0xF)<<4)|((0x0000&0xF)<<0):opcodepos+=1
}else{
poke opcodebuf,((opcodepos*2)+1),((dest&0xF)<<4)|((srcadd&0xF)<<0):opcodepos+=1
}
if src=-1{/*poke opcodebuf,((opcodepos*2)+0),peek(srcaddr,1):poke opcodebuf,((opcodepos*2)+1),peek(srcaddr,0):*/opcodepos+=1}
//sourcesliced5(cnt)=strmid(sourcesliced4(0),)
}
if sourcesliced3(0)!="END"{
pos4casl2(cnt,0)=(opcodepos-opcodeposold)
pos4casl2(cnt,1)=opcodeposold
}
/*memcpy opcodetmp,opcodebuf,(opcodepos-opcodeposold)*2,0,opcodeposold*2
if (opcodepos-opcodeposold)=2{
mes strf("%04d",cnt)+"("+strf("%02X",peek(opcodetmp,0))+strf("%02X",peek(opcodetmp,1))+strf("%02X",peek(opcodetmp,2))+strf("%02X",peek(opcodetmp,3))+") : "+sourcesliced
}else{
mes strf("%04d",cnt)+"("+strf("%02X",peek(opcodetmp,0))+strf("%02X",peek(opcodetmp,1))+") : "+sourcesliced
}*/

//sourceassembled+=sourcesliced+"\n"
}else{
if indefine=0{
switch sourcesliced3(0)
case ".INCLUDE"
notesel includerfromscr
noteload sourcesliced4(0)
noteunsel
notesel source
noteadd includerfromscr,cnt,1
notemaxx=notemax
continue cnt
swbreak

case ".DEFINE"
indefine=1
dup sourcesliced4ba4chk,sourcesliced4
defname(defineid)=sourcesliced2(0)
swbreak

case ".ENDDEF"
indefine=0
defineid++
swbreak

case "START"
startlet=1:opcodestarts=getaddrfromtext(sourcesliced4(0)):opcodepos=opcodestarts
if labelistpos=0{labelistpos++}
if sourcesliced2(0)!=""{labelist(labelistpos-1)=sourcesliced2(0):labelistx(labelistpos-1)=opcodepos}
swbreak
swend
}else{
if sourcesliced3(0)=".ENDDEF"{
indefine=0
definebuf(defineid)=strmid(definebuf(defineid),0,strlen(definebuf(defineid))-2)
defineid++
}else{
definebuf(defineid)+=sourcesliced+"\n"
}

}
}
loop
repeat labelist2pos
if labelist2(cnt)!=""{
srcaddr=getaddrfromtext(labelist2(cnt))
poke opcodebuf,((labelistx2(cnt)*2)+0),peek(srcaddr,1):poke opcodebuf,((labelistx2(cnt)*2)+1),peek(srcaddr,0)
}
loop
notesel source
repeat notemaxx
if pos4casl2(cnt,1)!-1{
noteget sourcesliced,cnt
if pos4casl2(cnt,0)<=2{memcpy opcodetmp,opcodebuf,pos4casl2(cnt,0)*2,0,pos4casl2(cnt,1)*2
if pos4casl2(cnt,0)=2{
mes strf("%04X",pos4casl2(cnt,1))+"h ("+strf("%02X",peek(opcodetmp,0))+strf("%02X",peek(opcodetmp,1))+strf("%02X",peek(opcodetmp,2))+strf("%02X",peek(opcodetmp,3))+") "+tab+""+sourcesliced
}else{
mes strf("%04X",pos4casl2(cnt,1))+"h ("+strf("%02X",peek(opcodetmp,0))+strf("%02X",peek(opcodetmp,1))+") "+tab+tab+""+sourcesliced
}
}else{opcodetmp=0
mes strf("%04X",pos4casl2(cnt,1))+"h (????) "+tab+tab+""+sourcesliced
}
}
loop

//mes sourceassembled
sdim code,codesize
memcpy code,opcodebuf,codesize,0,(opcodestarts*2)
bsave getpath(fname4ass,1)+".bin",code
mes "Assemble successful!"
#ifdef _debug
stop
#endif
end
